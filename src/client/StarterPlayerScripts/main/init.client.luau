-- I wrote my own UI output, I'm not a newbie like the people who use ACS
-- T10 Koles

-- github: https://github.com/RbxscrIptConnectinG/debuggerUI

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LogService = game:GetService("LogService")

local Remotes = ReplicatedStorage:WaitForChild("Remotes")
local ServerLog = Remotes:WaitForChild("ServerLog")

local Modules = ReplicatedStorage:WaitForChild("Modules")
local UIs = Modules:WaitForChild("UI")

local LocalPlayer = Players.LocalPlayer

local debuggerUIRoot, dispatch = require(UIs:WaitForChild("debugger"))(LocalPlayer.PlayerGui)

--[[
		
			Allowed to edit data:
				Text = custom or "hi. i'm debug text!",
				TextSize = custom or 11,
				TextColor = custom or Color3.fromRGB(255, 255, 255),
				Font = custom or Enum.Font.Code,
				LifeTime = custom or 10,

			Questionable to edit data:
				LayoutOrder = custom or 1,
				_baseLifeTime = props.LifeTime or 10,
				_disappearingGoal = custom or 0.01 <- (props.LifeTime / _static_LifeTime) -> _disappearing

			Unrecommended to edit data:
				_currentTick = tick(),
				_disappearing = false,
		
--]]

local colors = {
	[Enum.MessageType.MessageOutput] = Color3.new(255, 255, 255),
	[Enum.MessageType.MessageError] = Color3.fromRGB(255, 68, 68),
	[Enum.MessageType.MessageInfo] = Color3.fromRGB(75, 163, 255),
	[Enum.MessageType.MessageWarning] = Color3.fromRGB(255, 142, 60),
}

LogService.MessageOut:Connect(function(message, messageType: Enum.MessageType)
	dispatch:sendText({
		Text = message,
		TextColor = colors[messageType] or colors[Enum.MessageType.MessageOutput],
	})
end)

ServerLog.OnClientEvent:Connect(function(message, enumValue)
	dispatch:sendText({
		Text = message,
		TextColor = colors[Enum.MessageType:FromValue(enumValue or 0)],
	})
end)

--ye.

-- testing zone

local testing = false
if not testing then
	return
end
local UserInputService = game:GetService("UserInputService")

local randomTexts = require(script:WaitForChild("randomTexts"))

local function getLine(space: boolean)
	return `[{script:GetFullName()}:{debug.info(2, "l")}]` .. (space and " " or "")
end

local function start()
	UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			local basic = `{randomTexts[math.random(1, #randomTexts)]}: {dispatch:formatTable({
				hi = {
					this = randomTexts[math.random(1, #randomTexts)],
				},
				hello = {
					that = randomTexts[math.random(1, #randomTexts)],
				},
				randomNumber = math.random(-500, 500),
			})}\nhello there! {LocalPlayer.UserId}`
			dispatch:sendText({
				Text = randomTexts[math.random(1, #randomTexts)],
				_disappearingGoal = 0.1,
			})
		end
	end)
end
start()
